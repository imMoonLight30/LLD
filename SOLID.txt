//s-single responsibility principle
//A class should have only 1 reason to change
class Marker{
	String name;
	String color;
	int year;
	int price;
	public Marker(Sting name, String color, int year, int price){
		this.name=name;
		this.color=color;
		this.year=year;
		this.price=price;
	}
}

class Invoice{
	Marker marker;
	int quantity;
	public Invoice(){
		this.marker=marker;
		this.quantity=quantity;
	}
	
}

// O-open/closed Principle
// open for extension but closed for modification


// L - Liskov substitution Principle
// if class B is subtype of class  A,then we should be able to replace object of A with B without breaking the behaviour of the program.
// subclass should extend the capability of parent class not narrow it down

interface Bike{
	void turnOnEngine();
	void accelerate();
}
class MotorCycle implements Bike{
	boolean isEnginOn;
	boolean speed;
	
	public void turnOnEngine(){
		isEnginOn= true;
	}
	public void accelerate(){
		speed+=10;
	}
}
class Bicycle implements Bike{
	// is should not narrow down the functions
}


// I- interface segmented principle
// interfaces should be such, that client should implement unnecessary functions they do not need

//D - Dependency Inversion Principle
// class should depend on interfaces rather than concrete classes


 